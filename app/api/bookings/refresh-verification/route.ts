import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

/**
 * API endpoint to manually refresh/regenerate verification code for a booking
 */
export async function POST(request: Request) {
  try {
    const cookieStore = cookies();
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore });
    
    // Get current user
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Get request body
    const body = await request.json();
    const { bookingId } = body;

    if (!bookingId) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    console.log('üîÑ Refreshing verification code for booking:', bookingId);

    // Check if the booking exists and belongs to the user
    const { data: booking, error: bookingError } = await supabase
      .from('bookings')
      .select('id, user_id, status, payment_status')
      .eq('id', bookingId)
      .single();

    if (bookingError || !booking) {
      console.error('‚ùå Error fetching booking:', bookingError || 'Booking not found');
      return NextResponse.json(
        { error: 'Booking not found' },
        { status: 404 }
      );
    }

    // Ensure user owns the booking
    if (booking.user_id !== user.id) {
      return NextResponse.json(
        { error: 'Not authorized to access this booking' },
        { status: 403 }
      );
    }

    // Check if booking is in a valid state for code generation
    if (booking.status !== 'confirmed' && booking.payment_status !== 'completed') {
      return NextResponse.json(
        { error: 'Booking must be confirmed and paid to generate verification code' },
        { status: 400 }
      );
    }

    // Generate new verification code
    const { data: verificationCode, error: codeError } = await supabase.rpc(
      'generate_booking_verification_code',
      { booking_id: bookingId }
    );

    if (codeError) {
      console.error('‚ùå Error generating verification code:', codeError);
      return NextResponse.json(
        { error: 'Failed to generate verification code' },
        { status: 500 }
      );
    }

    // Verify code was actually generated by fetching it
    const { data: codeData, error: fetchError } = await supabase.rpc(
      'get_booking_verification_code',
      { booking_id: bookingId }
    );

    if (fetchError || !codeData || codeData.length === 0) {
      console.error('‚ùå Error verifying generated code:', fetchError || 'No code data returned');
      
      return NextResponse.json({
        success: false,
        error: 'Generated code could not be verified',
        code: verificationCode // Return the original code anyway
      });
    }

    console.log('‚úÖ Verification code refreshed successfully');
    
    return NextResponse.json({
      success: true,
      verificationCode: codeData[0].verification_code,
      expiryTime: codeData[0].code_expiry
    });
  } catch (error) {
    console.error('‚ùå Error refreshing verification code:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      },
      { status: 500 }
    );
  }
}
